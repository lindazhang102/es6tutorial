.row
  .large-12.columns
    h3 优化
.row
  .large-12.columns
    h4 1.适当的尾部调用
    p proper tail calls (tail call optimisation)
    p 函数的调用会在内存形成一个‘调用记录’，又称“调用帧”（call frame），保存调用位置和内部变量等信息。
      |如果在函数A的内部调用函数B，那么在A的调用记录上方，还会形成一个B的调用记录。等到B运行结束，将结果返回到A，
      |B的调用记录才会消失。如果函数B内部还调用函数C，那就还有一个C的调用记录栈，以此类推。所有的调用记录，
      |就形成一个“调用栈”（call stack）。
    p 尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用记录，因为调用位置、内部变量等信息都不会再用到了，
      |只要直接用内层函数的调用记录，取代外层函数的调用记录就可以了。
    pre
      code.javascript
        |function f() {
        |  let m = 1;
        |  let n = 2;
        |  return g(m + n);
        |}
        |f();
        |function f() {
        |  return g(3);
        |}
        |f();
        |g(3);
    .large-12.columns
    h4 2.直接递归
    p direct recursion
  .large-12.columns
    h4 3.互递归
    p mutual recursion
script
  $("#optimisation").addClass('active');
