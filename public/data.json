[
  {
    "category": "Optimisation",
    "data": [
      "proper tail calls (tail call optimisation)",
      "direct recursion",
      "mutual recursion"
    ]
  },
  {
    "category": "Syntax",
    "data": [
      "default function parameters",
      "basic functionality",
      "explicit undefined defers to the default",
      "defaults can refer to previous params",
      "temporal dead zone",
      "separate scope",
      "new Function() support",
      "rest parameters",
      "basic functionality",
      "function 'length' property",
      "arguments object interaction",
      "can't be used in setters",
      "new Function() support",
      "spread (...) operator",
      "with arrays, in function calls",
      "with arrays, in array literals",
      "with strings, in function calls",
      "with strings, in array literals",
      "with astral plane strings, in function calls",
      "with astral plane strings, in array literals",
      "with generic iterables, in calls",
      "with generic iterables, in arrays",
      "with instances of iterables, in calls",
      "with instances of iterables, in arrays",
      "object literal extensions",
      "computed properties",
      "shorthand properties",
      "shorthand methods",
      "string-keyed shorthand methods",
      "computed shorthand methods",
      "computed accessors",
      "for..of loops",
      "with arrays",
      "with strings",
      "with astral plane strings",
      "with generic iterables",
      "with instances of generic iterables",
      "iterator closing, break",
      "iterator closing, throw",
      "octal and binary literals",
      "octal literals",
      "binary literals",
      "octal supported by Number()",
      "binary supported by Number()",
      "template strings",
      "basic functionality",
      "tagged template strings",
      "RegExp \"y\" and \"u\" flags",
      "\"y\" flag",
      "\"u\" flag",
      "destructuring",
      "with arrays",
      "with strings",
      "with astral plane strings",
      "with generic iterables",
      "with instances of generic iterables",
      "iterator closing",
      "iterable destructuring expression",
      "chained iterable destructuring",
      "trailing commas in iterable patterns",
      "with objects",
      "object destructuring with primitives",
      "trailing commas in object patterns",
      "object destructuring expression",
      "chained object destructuring",
      "throws on null and undefined",
      "computed properties",
      "multiples in a single var statement",
      "nested",
      "in parameters",
      "in parameters, new Function() support",
      "in parameters, function 'length' property",
      "in for-in loop heads",
      "in for-of loop heads",
      "rest",
      "nested rest",
      "defaults",
      "defaults in parameters",
      "defaults, let temporal dead zone",
      "defaults in parameters, separate scope",
      "defaults in parameters, new Function() support",
      "Unicode code point escapes",
      "in strings",
      "in identifiers"
    ]
  },
  {
    "category": "Bindings",
    "data": [
      "const",
      "basic support",
      "is block-scoped",
      "redefining a const is an error",
      "temporal dead zone",
      "basic support (strict mode)",
      "is block-scoped (strict mode)",
      "redefining a const (strict mode)",
      "temporal dead zone (strict mode)",
      "let",
      "basic support",
      "is block-scoped",
      "for-loop statement scope",
      "temporal dead zone",
      "for-loop iteration scope",
      "basic support (strict mode)",
      "is block-scoped (strict mode)",
      "for-loop statement scope (strict mode)",
      "temporal dead zone (strict mode)",
      "for-loop iteration scope (strict mode)",
      "block-level function declaration"
    ]
  },
  {
    "category": "Functions",
    "data": [
      "arrow functions",
      "0 parameters",
      "1 parameter, no brackets",
      "multiple parameters",
      "lexical \"this\" binding",
      "\"this\" unchanged by call or apply",
      "can't be bound, can be curried",
      "lexical \"arguments\" binding",
      "no line break between params and ",
      "no \"prototype\" property",
      "lexical \"super\" binding",
      "lexical \"new.target\" binding",
      "class",
      "class statement",
      "is block-scoped",
      "class expression",
      "anonymous class",
      "constructor",
      "prototype methods",
      "string-keyed methods",
      "computed prototype methods",
      "static methods",
      "computed static methods",
      "accessor properties",
      "computed accessor properties",
      "static accessor properties",
      "computed static accessor properties",
      "class name is lexically scoped",
      "computed names, temporal dead zone",
      "methods aren't enumerable",
      "implicit strict mode",
      "constructor requires new",
      "extends",
      "extends expressions",
      "extends null",
      "new.target",
      "super",
      "statement in constructors",
      "expression in constructors",
      "in methods",
      "is statically bound",
      "generators",
      "basic functionality",
      "generator function expressions",
      "correct \"this\" binding",
      "can't use \"this\" with new",
      "sending",
      "%GeneratorPrototype%",
      "%GeneratorPrototype%.throw",
      "%GeneratorPrototype%.return",
      "yield operator precedence",
      "yield *, arrays",
      "yield *, strings",
      "yield *, astral plane strings",
      "yield *, generic iterables",
      "yield *, instances of iterables",
      "yield *, iterator closing",
      "yield *, iterator closing via throw()",
      "shorthand generator methods",
      "string-keyed shorthand generator methods",
      "computed shorthand generators",
      "shorthand generator methods, classes",
      "computed shorthand generators, classes"
    ]
  },
  {
    "category": "Built-ins",
    "data": [
      "typed arrays",
      "Int8Array",
      "Uint8Array",
      "Uint8ClampedArray",
      "Int16Array",
      "Uint16Array",
      "Int32Array",
      "Uint32Array",
      "Float32Array",
      "Float64Array",
      "DataView (Int8)",
      "DataView (Uint8)",
      "DataView (Int16)",
      "DataView (Uint16)",
      "DataView (Int32)",
      "DataView (Uint32)",
      "DataView (Float32)",
      "DataView (Float64)",
      "%TypedArray%.from",
      "%TypedArray%.of",
      "%TypedArray%.prototype.subarray",
      "%TypedArray%.prototype.join",
      "%TypedArray%.prototype.indexOf",
      "%TypedArray%.prototype.lastIndexOf",
      "%TypedArray%.prototype.slice",
      "%TypedArray%.prototype.every",
      "%TypedArray%.prototype.filter",
      "%TypedArray%.prototype.forEach",
      "%TypedArray%.prototype.map",
      "%TypedArray%.prototype.reduce",
      "%TypedArray%.prototype.reduceRight",
      "%TypedArray%.prototype.reverse",
      "%TypedArray%.prototype.some",
      "%TypedArray%.prototype.sort",
      "%TypedArray%.prototype.copyWithin",
      "%TypedArray%.prototype.find",
      "%TypedArray%.prototype.findIndex",
      "%TypedArray%.prototype.fill",
      "%TypedArray%.prototype.keys",
      "%TypedArray%.prototype.values",
      "%TypedArray%.prototype.entries",
      "Map",
      "basic functionality",
      "constructor arguments",
      "iterator closing",
      "Map.prototype.set returns this",
      "-0 key converts to +0",
      "Map.prototype.size",
      "Map.prototype.delete",
      "Map.prototype.clear",
      "Map.prototype.forEach",
      "Map.prototype.keys",
      "Map.prototype.values",
      "Map.prototype.entries",
      "Set",
      "basic functionality",
      "constructor arguments",
      "iterator closing",
      "Set.prototype.add returns this",
      "-0 key converts to +0",
      "Set.prototype.size",
      "Set.prototype.delete",
      "Set.prototype.clear",
      "Set.prototype.forEach",
      "Set.prototype.keys",
      "Set.prototype.values",
      "Set.prototype.entries",
      "WeakMap",
      "basic functionality",
      "constructor arguments",
      "iterator closing",
      "WeakMap.prototype.set returns this",
      "WeakMap.prototype.delete",
      "Support frozen objects as keys",
      "WeakSet",
      "basic functionality",
      "constructor arguments",
      "iterator closing",
      "WeakSet.prototype.add returns this",
      "WeakSet.prototype.delete",
      "Proxy",
      "\"get\" handler",
      "\"get\" handler, instances of proxies",
      "\"set\" handler",
      "\"set\" handler, instances of proxies",
      "\"has\" handler",
      "\"has\" handler, instances of proxies",
      "\"deleteProperty\" handler",
      "\"getOwnPropertyDescriptor\" handler",
      "\"defineProperty\" handler",
      "\"getPrototypeOf\" handler",
      "\"setPrototypeOf\" handler",
      "\"isExtensible\" handler",
      "\"preventExtensions\" handler",
      "\"enumerate\" handler",
      "\"ownKeys\" handler",
      "\"apply\" handler",
      "\"construct\" handler",
      "Proxy.revocable",
      "Array.isArray support",
      "JSON.stringify support",
      "Reflect",
      "Reflect.get",
      "Reflect.set",
      "Reflect.has",
      "Reflect.deleteProperty",
      "Reflect.getOwnPropertyDescriptor",
      "Reflect.defineProperty",
      "Reflect.getPrototypeOf",
      "Reflect.setPrototypeOf",
      "Reflect.isExtensible",
      "Reflect.preventExtensions",
      "Reflect.enumerate",
      "Reflect.ownKeys",
      "Reflect.apply",
      "Reflect.construct",
      "Reflect.construct, new.target",
      "Promise",
      "basic functionality",
      "Promise.all",
      "Promise.race",
      "Symbol",
      "basic functionality",
      "typeof support",
      "symbol keys are hidden to pre-ES6 code",
      "Object.defineProperty support",
      "cannot coerce to string or number",
      "can convert with String()",
      "new Symbol() throws",
      "Object(symbol)",
      "global symbol registry",
      "well-known symbols",
      "Symbol.hasInstance",
      "Symbol.isConcatSpreadable",
      "Symbol.iterator",
      "Symbol.species",
      "Symbol.toPrimitive",
      "Symbol.toStringTag",
      "Symbol.unscopables"
    ]
  },
  {
    "category": "Built-in extensions",
    "data": [
      "Object static methods",
      "Object.assign",
      "Object.is",
      "Object.getOwnPropertySymbols",
      "Object.setPrototypeOf",
      "function \"name\" property",
      "function statements",
      "function expressions",
      "new Function",
      "bound functions",
      "variables (function)",
      "object methods (function)",
      "accessor properties",
      "shorthand methods",
      "shorthand methods (no lexical binding)",
      "symbol-keyed methods",
      "class statements",
      "class expressions",
      "variables (class)",
      "object methods (class)",
      "class prototype methods",
      "class static methods",
      "isn't writable, is configurable",
      "String static methods",
      "String.raw",
      "String.fromCodePoint",
      "String.prototype methods",
      "String.prototype.codePointAt",
      "String.prototype.normalize",
      "String.prototype.repeat",
      "String.prototype.startsWith",
      "String.prototype.endsWith",
      "String.prototype.includes",
      "RegExp.prototype properties",
      "RegExp.prototype.flags",
      "RegExp.prototype[Symbol.match]",
      "RegExp.prototype[Symbol.replace]",
      "RegExp.prototype[Symbol.split]",
      "RegExp.prototype[Symbol.search]",
      "Array static methods",
      "Array.from, array-like objects",
      "Array.from, generic iterables",
      "Array.from, instances of generic iterables",
      "Array.from map function, array-like objects",
      "Array.from map function, generic iterables",
      "Array.from map function, instances of iterables",
      "Array.from, iterator closing",
      "Array.of",
      "Array.prototype methods",
      "Array.prototype.copyWithin",
      "Array.prototype.find",
      "Array.prototype.findIndex",
      "Array.prototype.fill",
      "Array.prototype.keys",
      "Array.prototype.values",
      "Array.prototype.entries",
      "Array.prototype[Symbol.unscopables]",
      "Number properties",
      "Number.isFinite",
      "Number.isInteger",
      "Number.isSafeInteger",
      "Number.isNaN",
      "Number.EPSILON",
      "Number.MIN_SAFE_INTEGER",
      "Number.MAX_SAFE_INTEGER",
      "Math methods",
      "Math.clz32",
      "Math.imul",
      "Math.sign",
      "Math.log10",
      "Math.log2",
      "Math.log1p",
      "Math.expm1",
      "Math.cosh",
      "Math.sinh",
      "Math.tanh",
      "Math.acosh",
      "Math.asinh",
      "Math.atanh",
      "Math.trunc",
      "Math.fround",
      "Math.cbrt",
      "Math.hypot"
    ]
  },
  {
    "category": "Subclassing",
    "data": [
      "Array is subclassable",
      "basic functionality",
      "Array.prototype.slice",
      "Array.from",
      "Array.of",
      "RegExp is subclassable",
      "basic functionality",
      "RegExp.prototype.exec",
      "RegExp.prototype.test",
      "Function is subclassable",
      "can be called",
      "can be used with \"new\"",
      "Function.prototype.call",
      "Function.prototype.apply",
      "Function.prototype.bind",
      "Promise is subclassable",
      "basic functionality",
      "Promise.all",
      "Promise.race",
      "miscellaneous subclassables",
      "Boolean is subclassable",
      "Number is subclassable",
      "String is subclassable",
      "Map is subclassable",
      "Set is subclassable"
    ]
  },
  {
    "category": "Misc",
    "data": [
      "Object static methods accept primitives",
      "Object.getPrototypeOf",
      "Object.getOwnPropertyDescriptor",
      "Object.getOwnPropertyNames",
      "Object.seal",
      "Object.freeze",
      "Object.preventExtensions",
      "Object.isSealed",
      "Object.isFrozen",
      "Object.isExtensible",
      "Object.keys",
      "miscellaneous",
      "no escaped reserved words as identifiers",
      "duplicate property names in strict mode",
      "no semicolon needed after do-while",
      "no assignments allowed in for-in head",
      "accessors aren't constructors",
      "Invalid Date",
      "RegExp constructor can alter flags",
      "built-in prototypes are not instances"
    ]
  },
  {
    "category": "Annex b",
    "data": [
      "hoisted block-level function declaration",
      "__proto__ in object literals",
      "basic support",
      "multiple __proto__ is an error",
      "not a computed property",
      "not a shorthand property",
      "not a shorthand method",
      "Object.prototype.__proto__",
      "get prototype",
      "set prototype",
      "absent from Object.create(null)",
      "present in hasOwnProperty()",
      "correct property descriptor",
      "present in Object.getOwnPropertyNames()",
      "String.prototype HTML methods",
      "existence",
      "tags' names are lowercase",
      "quotes in arguments are escaped",
      "RegExp.prototype.compile"
    ]
  }
]
