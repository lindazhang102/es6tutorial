h4 四、Generators
h5.subheader generators
p 
  | generator 是函数内部状态的遍历器。每调用一次，内部状态改变一次。generator 函数有两个特征，一是 function 后面带有一个 
  kbd *
  | ，二是函数体内有 
  kbd yield
  | 语句。
.feature-content
  h5 1.基本功能
  h5.subheader basic functionality
  pre
    code.javascript
      | function * generator(){
          yield 5; yield 6;
        };
        var iterator = generator();
        var item = iterator.next();
        var passed = item.value === 5 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === 6 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === undefined && item.done === true;
        console.log(passed);
  p 结果为 true。
  h5 2.generator 函数表达式
  h5.subheader generator function expressions
  pre
    code.javascript
      | var generator = function * (){
        yield 5; yield 6;
        };
        var iterator = generator();
        var item = iterator.next();
        var passed = item.value === 5 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === 6 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === undefined && item.done === true;
        console.log(passed);
  p 结果为 true。
  h5 3.正确的 this 绑定
  h5.subheader correct "this" binding
  pre
    code.javascript
      | function * generator(){
        yield this.x; yield this.y;
        };
        var iterator = { g: generator, x: 5, y: 6 }.g();
        var item = iterator.next();
        var passed = item.value === 5 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === 6 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === undefined && item.done === true;
        console.log(passed);
  p 结果为 true。
  h5 4.不能在 new 中使用 this
  h5.subheader can't use "this" with new
  pre
    code.javascript
      | function * generator(){
        yield this.x; yield this.y;
        };
        try {
        (new generator()).next();
        }
        catch (e) {
        console.log(true);
        }
  span.label.radius.warning 待测试
  h5 5.传递参数
  h5.subheader sending
  p yield 语句总是返回 undefined。next 方法可以带一个参数，该参数就会被当作上一个 yield 语句的返回值。
  pre
    code.javascript
      | var sent;
        function * generator(){
        sent = [yield 5, yield 6];
        };
        var iterator = generator();
        iterator.next();
        iterator.next("foo");
        iterator.next("bar");
        console.log(sent[0] === "foo" && sent[1] === "bar");      
  p 结果为 true。
  h5 6.generator 原型
  h5.subheader %GeneratorPrototype%
  pre
    code.javascript
      | function * generatorFn(){}
        var ownProto = Object.getPrototypeOf(generatorFn());
        var passed = ownProto === generatorFn.prototype;
        var sharedProto = Object.getPrototypeOf(ownProto);
        passed = passed && sharedProto !== Object.prototype &&
          sharedProto === Object.getPrototypeOf(function*(){}.prototype) &&
          sharedProto.hasOwnProperty('next');
        console.log(passed);
      
  p 结果为 true。
  h5 7.generator throw
  h5.subheader %GeneratorPrototype%.throw
  pre
    code.javascript
      | var passed = false;
        function * generator(){
          try {
          yield 5; yield 6;
        } catch(e) {
            passed = (e === "foo");
          }
        };
        var iterator = generator();
        iterator.next();
        iterator.throw("foo");
        console.log(passed);
  p 结果为 true。
  h5 8.generator return
  h5.subheader %GeneratorPrototype%.return
  pre
    code.javascript
      | function * generator(){
        yield 5; yield 6;
        };
        var iterator = generator();
        var item = iterator.next();
        var passed = item.value === 5 && item.done === false;
        item = iterator.return("quxquux");
        passed = passed && item.value === "quxquux" && item.done === true;
        item = iterator.next();
        passed = passed && item.value === undefined && item.done === true;
        console.log(passed);
  p 结果为 true。
  h5 9.yield 操作符优先级
  h5.subheader yield operator precedence
  p 
    | yield 操作符的优先级低于 
    kbd ?:
    |  操作符的优先级。
  pre
    code.javascript
      | var passed;
        function * generator(){
        passed = yield 0 ? true : false;
        };
        var iterator = generator();
        iterator.next();
        iterator.next(true);
        console.log(passed);
      
  p 结果为 true。
  h5 10.yield *, 数组
  h5.subheader yield *, arrays
  pre
    code.javascript
      | var iterator = (function * generator() {
        yield * [5, 6];
        }());
        var item = iterator.next();
        var passed = item.value === 5 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === 6 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === undefined && item.done === true;
        console.log(passed);
  p 结果为 true。
  h5 11.yield *,字符串
  h5.subheader yield *, strings
  pre
    code.javascript
      | var iterator = (function * generator() {
          yield * "56";
        }());
        var item = iterator.next();
        var passed = item.value === "5" && item.done === false;
        item = iterator.next();
        passed = passed && item.value === "6" && item.done === false;
        item = iterator.next();
        passed = passed && item.value === undefined && item.done === true;
        console.log(passed);
  p 结果为 true。
  h5 12.yield *，特殊字符
  h5.subheader yield *, astral plane strings
  pre
    code.javascript
      | var iterator = (function * generator() {
        yield * "𠮷𠮶";
        }());
        var item = iterator.next();
        var passed = item.value === "𠮷" && item.done === false;
        item = iterator.next();
        passed = passed && item.value === "𠮶" && item.done === false;
        item = iterator.next();
        passed = passed && item.value === undefined && item.done === true;
        console.log(passed);
  p 结果为 true。
  h5 13.yield *，通用迭代器
  h5.subheader yield *, generic iterables
  p 首先定义一个通用的迭代器函数：
  pre
    code.javascript
      | function __createIterableObject(a, b, c) {
          if (typeof Symbol === "function" && Symbol.iterator) {
            var arr = [a, b, c, ,];
            var iterable = {
              next: function() {
                return { value: arr.shift(), done: arr.length <= 0 };
              },
            };
            iterable[Symbol.iterator] = function(){ return iterable; }
            return iterable;
          }
          else {
            return eval("(function*() { yield a; yield b; yield c; }())");
          }
        }
  p 通过调用这个迭代器函数，生成一个迭代器。
  pre
    code.javascript
      | var iterator = (function * generator() {
          yield * __createIterableObject(5, 6, 7);
        }());
        var item = iterator.next();
        var passed = item.value === 5 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === 6 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === 7 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === undefined && item.done === true;
        console.log(passed);
  p 结果为 true。
  h5 14.yield *，迭代器实例
  h5.subheader yield *, instances of iterables
  pre
    code.javascript
      | var iterator = (function * generator() {
          yield * Object.create(__createIterableObject(5, 6, 7));
        }());
        var item = iterator.next();
        var passed = item.value === 5 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === 6 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === 7 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === undefined && item.done === true;
        console.log(passed);
  p 结果为 true。
  h5 15.yield *，迭代器关闭
  h5.subheader yield *, iterator closing
  pre
    code.javascript
      | var closed = '';
        var iter = __createIterableObject(1, 2, 3);
        iter['return'] = function(){
          closed += 'a';
          return {done: true};
        }
        var gen = (function* generator(){
          try {
            yield *iter;
          } finally {
            closed += 'b';
          }
        })();
        gen.next();
        gen['return']();
        console.log(closed === 'ab');
  span.label.radius.warning 待测试
  h5 16.yield *，迭代器通过 throw 关闭
  h5.subheader yield *, iterator closing via throw()
  pre
    code.javascript
      | var closed = false;
        var iter = __createIterableObject(1, 2, 3);
        iter['throw'] = undefined;
        iter['return'] = function(){
          closed = true;
          return {done: true};
        }
        var gen = (function*(){
          try {
            yield *iter;
          } catch(e){}
        })();
        gen.next();
        gen['throw']();
        console.log(closed);
  span.label.radius.warning 待测试
  h5 17.简写 generator 方法
  h5.subheader shorthand generator methods
  pre
    code.javascript
      | var o = {
          * generator() {
            yield 5; yield 6;
          },
        };
        var iterator = o.generator();
        var item = iterator.next();
        var passed = item.value === 5 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === 6 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === undefined && item.done === true;
        console.log(passed);
  p 结果为 true。
  h5 18.带空格字符串的简写 generator 方法
  h5.subheader string-keyed shorthand generator methods
  pre
    code.javascript
      | var o = {
          * "foo bar"() {
            yield 5; yield 6;
          },
        };
        var iterator = o["foo bar"]();
        var item = iterator.next();
        var passed = item.value === 5 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === 6 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === undefined && item.done === true;
        console.log(passed);
  p 结果为 true。
  h5 19.计算简写 generator
  h5.subheader computed shorthand generators
  pre
    code.javascript
      | var garply = "generator";
        var o = {
          * [garply] () {
            yield 5; yield 6;
          },
        };
        var iterator = o.generator();
        var item = iterator.next();
        var passed = item.value === 5 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === 6 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === undefined && item.done === true;
        console.log(passed);
  p 结果为 true。
  h5 20.简写 generator 方法，类
  h5.subheader shorthand generator methods, classes
  pre
    code.javascript
      | class C {
          * generator() {
            yield 5; yield 6;
          }
        };
        var iterator = new C().generator();
        var item = iterator.next();
        var passed = item.value === 5 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === 6 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === undefined && item.done === true;
        console.log(passed);
  p 结果为 true。
  h5 21.计算简写 generator 方法，类
  h5.subheader computed shorthand generators, classes
  pre
    code.javascript
      | var garply = "generator";
        class C {
          * [garply] () {
            yield 5; yield 6;
          }
        }
        var iterator = new C().generator();
        var item = iterator.next();
        var passed = item.value === 5 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === 6 && item.done === false;
        item = iterator.next();
        passed = passed && item.value === undefined && item.done === true;
        console.log(passed);
  p 结果为 true。
